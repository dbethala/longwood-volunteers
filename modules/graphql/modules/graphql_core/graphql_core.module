<?php

/**
 * @file
 * Definitions and hook implementations for graphql_core.
 */

define('GRAPHQL_CORE_SCALAR_PLUGIN', 'scalar');
define('GRAPHQL_CORE_FIELD_PLUGIN', 'field');
define('GRAPHQL_CORE_MUTATION_PLUGIN', 'mutation');
define('GRAPHQL_CORE_INTERFACE_PLUGIN', 'interface');
define('GRAPHQL_CORE_INPUT_TYPE_PLUGIN', 'scalar');
define('GRAPHQL_CORE_TYPE_PLUGIN', 'type');
define('GRAPHQL_CORE_ENUM_PLUGIN', 'enum');

/**
 * Turn a list of machine names into a camel-cased string.
 *
 * @param string[]|string $components
 *   Name components to be concatenated.
 *
 * @return string
 *   A camel-cased concatenation of the input components.
 */
function graphql_core_camelcase($components) {
  $components = is_array($components) ? implode('_', $components) : $components;
  $components = preg_split('/[^a-zA-Z0-9]/', $components);

  return implode('', array_map('ucfirst', $components));
}

/**
 * Turn a list of machine names into a property-cased string.
 *
 * @param string[]|string $components
 *   Name components to be concatenated.
 *
 * @return string
 *   A camel-cased concatenation of the input components.
 */
function graphql_core_propcase($components) {
  return lcfirst(graphql_core_camelcase($components));
}
